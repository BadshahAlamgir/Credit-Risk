# -*- coding: utf-8 -*-
"""Credit_Risk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WRJscZys-m7-vf4R7GDVjU-mVupsIuVN
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score
from imblearn.over_sampling import SMOTE

# Load data
col_names = [
    "age",
    "income",
    "home_ownership",
    "emp_length",
    "loan_intent",
    "loan_grade",
    "loan_amnt",
    "loan_int_rate",
    "loan_status",
    "loan_percent_income",
    "default_on_file",
    "cred_hist_length"
]
df = pd.read_csv("dataset_", skiprows=75 , names = col_names,  na_values=["?"])
df = df.dropna()

df.head()

# Basic overview
print(df.shape)
print(df.info())
print(df.describe())

# Class balance
print(df['default_on_file'].value_counts(normalize=True))

# Missing values check
print(df.isnull().sum())

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='default_on_file', data=df, palette='Set2')
plt.title("Target Variable Distribution (Before Balancing)")
plt.show()

fig, ax = plt.subplots(2, 1, figsize=(12, 5))
sns.histplot(df['age'], kde=True, ax=ax[0], color='blue')
ax[0].set_title("Age Distribution")

sns.histplot(df['income'], kde=True, ax=ax[1], color='green')
ax[1].set_title("Income Distribution")

plt.tight_layout()
plt.show()

"""Here we group the data by loan intent and calculate the mean default rate for each category. This tells us which loan purposes (e.g., education, medical, small business) have higher chances of default."""

# Convert 'default_on_file' to numerical
df['default_on_file'] = df['default_on_file'].apply(lambda x: 1 if x == 'Y' else 0)

loan_intent_default = df.groupby('loan_intent')['default_on_file'].mean().reset_index()
sns.barplot(x='loan_intent', y='default_on_file', data=loan_intent_default, palette='coolwarm')
plt.title("Default Rate by Loan Intent")
plt.xticks(rotation=45)
plt.show()

"""A heatmap shows correlations between all numerical variables. Strong positive/negative correlations can reveal redundant features or hidden relationships."""

corr = df.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(corr, annot=False, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

sns.scatterplot(x='loan_amnt', y='loan_int_rate', hue='default_on_file', data=df, alpha=0.6)
plt.title("Loan Amount vs Interest Rate (Colored by Default)")
plt.show()

grade_risk = df.groupby('loan_grade')['default_on_file'].mean().reset_index()
sns.barplot(x='loan_grade', y='default_on_file', data=grade_risk)
plt.title("Default Rate by Loan Grade")
plt.ylabel("Default Rate")
plt.show()

numeric_cols = [
    "person_age", "person_income", "person_emp_length", "loan_amnt",
    "loan_int_rate", "loan_status", "loan_percent_income", "cred_hist_length"
]


cat_cols = ["home_ownership", "loan_intent", "loan_grade", "default_on_file"]


for col in cat_cols:
    df[col] = df[col].astype('category').cat.codes

# Split features and target
X = df.drop("default_on_file", axis=1)
y = df["default_on_file"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Balance data
sm = SMOTE(random_state=42)
X_train_res, y_train_res = sm.fit_resample(X_train, y_train)

#

#Scale
scaler = StandardScaler()
X_train_res = scaler.fit_transform(X_train_res)
X_test = scaler.transform(X_test)

# Train model
model = RandomForestClassifier(random_state=42)
model.fit(X_train_res, y_train_res)

# Predict and evaluate
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:,1]

print(classification_report(y_test, y_pred))
print("AUC-ROC:", roc_auc_score(y_test, y_prob))

"""We extract the feature importance from the trained Random Forest model. This reveals which features the model considers most predictive of default."""

import numpy as np

importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
feature_names = X.columns

plt.figure(figsize=(13,6))
sns.barplot(x=importances[indices], y=feature_names[indices], palette='viridis')
plt.ylabel('Variables')
plt.xlabel('Importance')
plt.title("Feature Importance")
plt.show()

""" loan_int_rate and loan_percent_income rank highest, it means borrowers with high interest rates and high loan-to-income ratios are more likely to default. This aligns with standard credit risk theory.



"""